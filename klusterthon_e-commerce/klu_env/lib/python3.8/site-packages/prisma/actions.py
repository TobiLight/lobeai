# -*- coding: utf-8 -*-
# code generated by Prisma. DO NOT EDIT.
# pyright: reportUnusedImport=false
# fmt: off
from __future__ import annotations

# global imports for type checking
from builtins import bool as _bool
from builtins import int as _int
from builtins import float as _float
from builtins import str as _str
import sys
import decimal
import datetime
from typing import (
    TYPE_CHECKING,
    Optional,
    Iterable,
    Iterator,
    Sequence,
    Callable,
    ClassVar,
    NoReturn,
    TypeVar,
    Generic,
    Mapping,
    Tuple,
    Union,
    List,
    Dict,
    Type,
    Any,
    Set,
    overload,
    cast,
)
from typing_extensions import TypedDict, Literal


LiteralString = str
# -- template actions.py.jinja --
from typing import TypeVar
import warnings

from . import types, errors, bases
from ._compat import model_parse

if TYPE_CHECKING:
    from .client import Client
    from .bases import _PrismaModel


_PrismaModelT = TypeVar('_PrismaModelT', bound='_PrismaModel')


class UserActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: 'Client', model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model

    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.User]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = await User.prisma().query_raw(
            'SELECT * FROM User WHERE id = $1',
            'bbadfchfja',
        )
        ```
        """
        return await self._client.query_raw(query, *args, model=self._model)

    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.User
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = await User.prisma().query_first(
            'SELECT * FROM User WHERE first_name = $1',
            'dhheabfhf',
        )
        ```
        """
        return await self._client.query_first(query, *args, model=self._model)

    async def create(
        self,
        data: types.UserCreateInput,
        include: Optional[types.UserInclude] = None
    ) -> _PrismaModelT:
        """Create a new User record.

        Parameters
        ----------
        data
            User record data
        include
            Specifies which relations should be loaded on the returned User model

        Returns
        -------
        prisma.models.User
            The created User record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a User record from just the required fields
        user = await User.prisma().create(
            data={
                # data to create a User record
                'id': 'ggciceaie',
                'email': 'bbehjachib',
                'password': 'cadfabfehe',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='create',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def create_many(
        self,
        data: List[types.UserCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple User records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of User record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = await User.prisma().create_many(
            data=[
                {
                    # data to create a User record
                    'id': 'dgiiaaijj',
                    'email': 'bfaiacjjfc',
                    'password': 'eigcfgbif',
                },
                {
                    # data to create a User record
                    'id': 'bagcfbhiig',
                    'email': 'cghideieh',
                    'password': 'biabhbdai',
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if self._client._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        resp = await self._client._execute(
            method='create_many',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.UserWhereUniqueInput,
        include: Optional[types.UserInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single User record.

        Parameters
        ----------
        where
            User filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned User model

        Returns
        -------
        prisma.models.User
            The deleted User record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        user = await User.prisma().delete(
            where={
                'id': 'idghgaicb',
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='delete',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def find_unique(
        self,
        where: types.UserWhereUniqueInput,
        include: Optional[types.UserInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique User record.

        Parameters
        ----------
        where
            User filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned User model

        Returns
        -------
        prisma.models.User
            The found User record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        user = await User.prisma().find_unique(
            where={
                'id': 'fjfddhigg',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return model_parse(self._model, result)

    async def find_unique_or_raise(
        self,
        where: types.UserWhereUniqueInput,
        include: Optional[types.UserInclude] = None
    ) -> _PrismaModelT:
        """Find a unique User record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            User filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned User model

        Returns
        -------
        prisma.models.User
            The found User record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        user = await User.prisma().find_unique_or_raise(
            where={
                'id': 'hjaecfifb',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique_or_raise',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.UserWhereInput] = None,
        cursor: Optional[types.UserWhereUniqueInput] = None,
        include: Optional[types.UserInclude] = None,
        order: Optional[Union[types.UserOrderByInput, List[types.UserOrderByInput]]] = None,
        distinct: Optional[List[types.UserScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple User records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of User records returned
        skip
            Ignore the first N results
        where
            User filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned User model
        order
            Order the returned User records by any field
        distinct
            Filter User records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.User]
            The list of all User records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 User records
        users = await User.prisma().find_many(take=10)

        # find the first 5 User records ordered by the last_name field
        users = await User.prisma().find_many(
            take=5,
            order={
                'last_name': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_many',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [model_parse(self._model, r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.UserWhereInput] = None,
        cursor: Optional[types.UserWhereUniqueInput] = None,
        include: Optional[types.UserInclude] = None,
        order: Optional[Union[types.UserOrderByInput, List[types.UserOrderByInput]]] = None,
        distinct: Optional[List[types.UserScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single User record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            User filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned User model
        order
            Order the returned User records by any field
        distinct
            Filter User records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.User
            The first User record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second User record ordered by the email field
        user = await User.prisma().find_first(
            skip=1,
            order={
                'email': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None

        return model_parse(self._model, result)

    async def find_first_or_raise(
        self,
        skip: Optional[int] = None,
        where: Optional[types.UserWhereInput] = None,
        cursor: Optional[types.UserWhereUniqueInput] = None,
        include: Optional[types.UserInclude] = None,
        order: Optional[Union[types.UserOrderByInput, List[types.UserOrderByInput]]] = None,
        distinct: Optional[List[types.UserScalarFieldKeys]] = None,
    ) -> _PrismaModelT:
        """Find a single User record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            User filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned User model
        order
            Order the returned User records by any field
        distinct
            Filter User records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.User
            The first User record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second User record ordered by the password field
        user = await User.prisma().find_first_or_raise(
            skip=1,
            order={
                'password': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first_or_raise',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update(
        self,
        data: types.UserUpdateInput,
        where: types.UserWhereUniqueInput,
        include: Optional[types.UserInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single User record.

        Parameters
        ----------
        data
            User record data specifying what to update
        where
            User filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned User model

        Returns
        -------
        prisma.models.User
            The updated User record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = await User.prisma().update(
            where={
                'id': 'cbbbjbfcii',
            },
            data={
                # data to update the User record to
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='update',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def upsert(
        self,
        where: types.UserWhereUniqueInput,
        data: types.UserUpsertInput,
        include: Optional[types.UserInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            User filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned User model

        Returns
        -------
        prisma.models.User
            The created or updated User record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        user = await User.prisma().upsert(
            where={
                'id': 'bbejhfidcb',
            },
            data={
                'create': {
                    'id': 'bbejhfidcb',
                    'email': 'cghideieh',
                    'password': 'biabhbdai',
                },
                'update': {
                    'email': 'cghideieh',
                    'password': 'biabhbdai',
                },
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='upsert',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update_many(
        self,
        data: types.UserUpdateManyMutationInput,
        where: types.UserWhereInput,
    ) -> int:
        """Update multiple User records

        Parameters
        ----------
        data
            User data to update the selected User records to
        where
            Filter to select the User records to update

        Returns
        -------
        int
            The total number of User records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all User records
        total = await User.prisma().update_many(
            data={
                'created_at': datetime.datetime.utcnow()
            },
            where={}
        )
        ```
        """
        resp = await self._client._execute(
            method='update_many',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    async def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.UserWhereInput] = None,
        cursor: Optional[types.UserWhereUniqueInput] = None,
    ) -> int:
        """Count the number of User records present in the database

        Parameters
        ----------
        select
            Select the User fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            User filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.UserCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await User.prisma().count()

        # results: prisma.types.UserCountAggregateOutput
        results = await User.prisma().count(
            select={
                '_all': True,
                'updated_at': True,
            },
        )
        ```
        """


    @overload
    async def count(
        self,
        select: types.UserCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.UserWhereInput] = None,
        cursor: Optional[types.UserWhereUniqueInput] = None,
    ) -> types.UserCountAggregateOutput:
        ...

    async def count(
        self,
        select: Optional[types.UserCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.UserWhereInput] = None,
        cursor: Optional[types.UserWhereUniqueInput] = None,
    ) -> Union[int, types.UserCountAggregateOutput]:
        """Count the number of User records present in the database

        Parameters
        ----------
        select
            Select the User fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            User filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.UserCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await User.prisma().count()

        # results: prisma.types.UserCountAggregateOutput
        results = await User.prisma().count(
            select={
                '_all': True,
                'id': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = await self._client._execute(
            method='count',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.UserCountAggregateOutput, resp['data']['result']['_count'])

    async def delete_many(
        self,
        where: Optional[types.UserWhereInput] = None
    ) -> int:
        """Delete multiple User records.

        Parameters
        ----------
        where
            Optional User filter to find the records to be deleted

        Returns
        -------
        int
            The total number of User records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all User records
        total = await User.prisma().delete_many()
        ```
        """
        resp = await self._client._execute(
            method='delete_many',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    async def group_by(
        self,
        by: List['types.UserScalarFieldKeys'],
        *,
        where: Optional['types.UserWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.UserAvgAggregateInput'] = None,
        sum: Optional['types.UserSumAggregateInput'] = None,
        min: Optional['types.UserMinAggregateInput'] = None,
        max: Optional['types.UserMaxAggregateInput'] = None,
        having: Optional['types.UserScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.UserCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.UserScalarFieldKeys', 'types.SortOrder'], List[Mapping['types.UserScalarFieldKeys', 'types.SortOrder']]]] = None,
    ) -> List['types.UserGroupByOutput']:
        """Group User records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar User fields to group records by
        where
            User filter to select records
        take
            Limit the maximum number of User records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.UserGroupByOutput]
            A list of dictionaries representing the User record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group User records by first_name values
        # and count how many records are in each group
        results = await User.prisma().group_by(
            ['first_name'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = await self._client._execute(
            method='group_by',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]


class ConversationActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: 'Client', model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model

    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.Conversation]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = await Conversation.prisma().query_raw(
            'SELECT * FROM Conversation WHERE id = $1',
            'bgeecijdgg',
        )
        ```
        """
        return await self._client.query_raw(query, *args, model=self._model)

    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.Conversation
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = await Conversation.prisma().query_first(
            'SELECT * FROM Conversation WHERE user_id = $1',
            'bdiicjafbj',
        )
        ```
        """
        return await self._client.query_first(query, *args, model=self._model)

    async def create(
        self,
        data: types.ConversationCreateInput,
        include: Optional[types.ConversationInclude] = None
    ) -> _PrismaModelT:
        """Create a new Conversation record.

        Parameters
        ----------
        data
            Conversation record data
        include
            Specifies which relations should be loaded on the returned Conversation model

        Returns
        -------
        prisma.models.Conversation
            The created Conversation record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a Conversation record from just the required fields
        conversation = await Conversation.prisma().create(
            data={
                # data to create a Conversation record
                'id': 'bgehebiafc',
                'user_id': 'bghffegacj',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='create',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def create_many(
        self,
        data: List[types.ConversationCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple Conversation records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of Conversation record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = await Conversation.prisma().create_many(
            data=[
                {
                    # data to create a Conversation record
                    'id': 'bhghchehcc',
                    'user_id': 'dcgchcbbf',
                },
                {
                    # data to create a Conversation record
                    'id': 'bdedcabahc',
                    'user_id': 'ghfhiafcb',
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if self._client._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        resp = await self._client._execute(
            method='create_many',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.ConversationWhereUniqueInput,
        include: Optional[types.ConversationInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single Conversation record.

        Parameters
        ----------
        where
            Conversation filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned Conversation model

        Returns
        -------
        prisma.models.Conversation
            The deleted Conversation record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        conversation = await Conversation.prisma().delete(
            where={
                'id': 'heejgedji',
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='delete',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def find_unique(
        self,
        where: types.ConversationWhereUniqueInput,
        include: Optional[types.ConversationInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique Conversation record.

        Parameters
        ----------
        where
            Conversation filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Conversation model

        Returns
        -------
        prisma.models.Conversation
            The found Conversation record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        conversation = await Conversation.prisma().find_unique(
            where={
                'id': 'bjgjgibgbf',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return model_parse(self._model, result)

    async def find_unique_or_raise(
        self,
        where: types.ConversationWhereUniqueInput,
        include: Optional[types.ConversationInclude] = None
    ) -> _PrismaModelT:
        """Find a unique Conversation record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            Conversation filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Conversation model

        Returns
        -------
        prisma.models.Conversation
            The found Conversation record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        conversation = await Conversation.prisma().find_unique_or_raise(
            where={
                'id': 'bbbgbhfjge',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique_or_raise',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.ConversationWhereInput] = None,
        cursor: Optional[types.ConversationWhereUniqueInput] = None,
        include: Optional[types.ConversationInclude] = None,
        order: Optional[Union[types.ConversationOrderByInput, List[types.ConversationOrderByInput]]] = None,
        distinct: Optional[List[types.ConversationScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple Conversation records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of Conversation records returned
        skip
            Ignore the first N results
        where
            Conversation filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Conversation model
        order
            Order the returned Conversation records by any field
        distinct
            Filter Conversation records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.Conversation]
            The list of all Conversation records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 Conversation records
        conversations = await Conversation.prisma().find_many(take=10)

        # find the first 5 Conversation records ordered by the created_at field
        conversations = await Conversation.prisma().find_many(
            take=5,
            order={
                'created_at': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_many',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [model_parse(self._model, r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.ConversationWhereInput] = None,
        cursor: Optional[types.ConversationWhereUniqueInput] = None,
        include: Optional[types.ConversationInclude] = None,
        order: Optional[Union[types.ConversationOrderByInput, List[types.ConversationOrderByInput]]] = None,
        distinct: Optional[List[types.ConversationScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single Conversation record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Conversation filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Conversation model
        order
            Order the returned Conversation records by any field
        distinct
            Filter Conversation records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Conversation
            The first Conversation record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Conversation record ordered by the updated_at field
        conversation = await Conversation.prisma().find_first(
            skip=1,
            order={
                'updated_at': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None

        return model_parse(self._model, result)

    async def find_first_or_raise(
        self,
        skip: Optional[int] = None,
        where: Optional[types.ConversationWhereInput] = None,
        cursor: Optional[types.ConversationWhereUniqueInput] = None,
        include: Optional[types.ConversationInclude] = None,
        order: Optional[Union[types.ConversationOrderByInput, List[types.ConversationOrderByInput]]] = None,
        distinct: Optional[List[types.ConversationScalarFieldKeys]] = None,
    ) -> _PrismaModelT:
        """Find a single Conversation record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Conversation filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Conversation model
        order
            Order the returned Conversation records by any field
        distinct
            Filter Conversation records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Conversation
            The first Conversation record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Conversation record ordered by the id field
        conversation = await Conversation.prisma().find_first_or_raise(
            skip=1,
            order={
                'id': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first_or_raise',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update(
        self,
        data: types.ConversationUpdateInput,
        where: types.ConversationWhereUniqueInput,
        include: Optional[types.ConversationInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single Conversation record.

        Parameters
        ----------
        data
            Conversation record data specifying what to update
        where
            Conversation filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned Conversation model

        Returns
        -------
        prisma.models.Conversation
            The updated Conversation record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        conversation = await Conversation.prisma().update(
            where={
                'id': 'igbehcbab',
            },
            data={
                # data to update the Conversation record to
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='update',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def upsert(
        self,
        where: types.ConversationWhereUniqueInput,
        data: types.ConversationUpsertInput,
        include: Optional[types.ConversationInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            Conversation filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned Conversation model

        Returns
        -------
        prisma.models.Conversation
            The created or updated Conversation record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        conversation = await Conversation.prisma().upsert(
            where={
                'id': 'bdadaadhag',
            },
            data={
                'create': {
                    'id': 'bdadaadhag',
                    'user_id': 'ghfhiafcb',
                },
                'update': {
                    'user_id': 'ghfhiafcb',
                },
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='upsert',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update_many(
        self,
        data: types.ConversationUpdateManyMutationInput,
        where: types.ConversationWhereInput,
    ) -> int:
        """Update multiple Conversation records

        Parameters
        ----------
        data
            Conversation data to update the selected Conversation records to
        where
            Filter to select the Conversation records to update

        Returns
        -------
        int
            The total number of Conversation records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all Conversation records
        total = await Conversation.prisma().update_many(
            data={
                'user_id': 'bgiggdidbf'
            },
            where={}
        )
        ```
        """
        resp = await self._client._execute(
            method='update_many',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    async def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.ConversationWhereInput] = None,
        cursor: Optional[types.ConversationWhereUniqueInput] = None,
    ) -> int:
        """Count the number of Conversation records present in the database

        Parameters
        ----------
        select
            Select the Conversation fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Conversation filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.ConversationCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await Conversation.prisma().count()

        # results: prisma.types.ConversationCountAggregateOutput
        results = await Conversation.prisma().count(
            select={
                '_all': True,
                'created_at': True,
            },
        )
        ```
        """


    @overload
    async def count(
        self,
        select: types.ConversationCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.ConversationWhereInput] = None,
        cursor: Optional[types.ConversationWhereUniqueInput] = None,
    ) -> types.ConversationCountAggregateOutput:
        ...

    async def count(
        self,
        select: Optional[types.ConversationCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.ConversationWhereInput] = None,
        cursor: Optional[types.ConversationWhereUniqueInput] = None,
    ) -> Union[int, types.ConversationCountAggregateOutput]:
        """Count the number of Conversation records present in the database

        Parameters
        ----------
        select
            Select the Conversation fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Conversation filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.ConversationCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await Conversation.prisma().count()

        # results: prisma.types.ConversationCountAggregateOutput
        results = await Conversation.prisma().count(
            select={
                '_all': True,
                'updated_at': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = await self._client._execute(
            method='count',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.ConversationCountAggregateOutput, resp['data']['result']['_count'])

    async def delete_many(
        self,
        where: Optional[types.ConversationWhereInput] = None
    ) -> int:
        """Delete multiple Conversation records.

        Parameters
        ----------
        where
            Optional Conversation filter to find the records to be deleted

        Returns
        -------
        int
            The total number of Conversation records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all Conversation records
        total = await Conversation.prisma().delete_many()
        ```
        """
        resp = await self._client._execute(
            method='delete_many',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    async def group_by(
        self,
        by: List['types.ConversationScalarFieldKeys'],
        *,
        where: Optional['types.ConversationWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.ConversationAvgAggregateInput'] = None,
        sum: Optional['types.ConversationSumAggregateInput'] = None,
        min: Optional['types.ConversationMinAggregateInput'] = None,
        max: Optional['types.ConversationMaxAggregateInput'] = None,
        having: Optional['types.ConversationScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.ConversationCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.ConversationScalarFieldKeys', 'types.SortOrder'], List[Mapping['types.ConversationScalarFieldKeys', 'types.SortOrder']]]] = None,
    ) -> List['types.ConversationGroupByOutput']:
        """Group Conversation records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar Conversation fields to group records by
        where
            Conversation filter to select records
        take
            Limit the maximum number of Conversation records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.ConversationGroupByOutput]
            A list of dictionaries representing the Conversation record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group Conversation records by id values
        # and count how many records are in each group
        results = await Conversation.prisma().group_by(
            ['id'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = await self._client._execute(
            method='group_by',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]


class PromptActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: 'Client', model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model

    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.Prompt]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = await Prompt.prisma().query_raw(
            'SELECT * FROM Prompt WHERE id = $1',
            'caaaedabfc',
        )
        ```
        """
        return await self._client.query_raw(query, *args, model=self._model)

    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.Prompt
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = await Prompt.prisma().query_first(
            'SELECT * FROM Prompt WHERE query = $1',
            'bigibebcib',
        )
        ```
        """
        return await self._client.query_first(query, *args, model=self._model)

    async def create(
        self,
        data: types.PromptCreateInput,
        include: Optional[types.PromptInclude] = None
    ) -> _PrismaModelT:
        """Create a new Prompt record.

        Parameters
        ----------
        data
            Prompt record data
        include
            Specifies which relations should be loaded on the returned Prompt model

        Returns
        -------
        prisma.models.Prompt
            The created Prompt record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a Prompt record from just the required fields
        prompt = await Prompt.prisma().create(
            data={
                # data to create a Prompt record
                'id': 'bigaiehgcc',
                'query': 'beeifcbebf',
                'response': 'bgcigfahea',
                'conversation_id': 'bcejgaggif',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='create',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def create_many(
        self,
        data: List[types.PromptCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple Prompt records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of Prompt record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = await Prompt.prisma().create_many(
            data=[
                {
                    # data to create a Prompt record
                    'id': 'idfjadbcc',
                    'query': 'hgdhbjhhj',
                    'response': 'ecjjjfbae',
                    'conversation_id': 'bhhfibbigf',
                },
                {
                    # data to create a Prompt record
                    'id': 'ijdbeffgg',
                    'query': 'jjfeafhfj',
                    'response': 'cbachdgfce',
                    'conversation_id': 'chbfcacbd',
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if self._client._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        resp = await self._client._execute(
            method='create_many',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.PromptWhereUniqueInput,
        include: Optional[types.PromptInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single Prompt record.

        Parameters
        ----------
        where
            Prompt filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned Prompt model

        Returns
        -------
        prisma.models.Prompt
            The deleted Prompt record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        prompt = await Prompt.prisma().delete(
            where={
                'id': 'efggddide',
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='delete',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def find_unique(
        self,
        where: types.PromptWhereUniqueInput,
        include: Optional[types.PromptInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique Prompt record.

        Parameters
        ----------
        where
            Prompt filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Prompt model

        Returns
        -------
        prisma.models.Prompt
            The found Prompt record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        prompt = await Prompt.prisma().find_unique(
            where={
                'id': 'caficfigfb',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return model_parse(self._model, result)

    async def find_unique_or_raise(
        self,
        where: types.PromptWhereUniqueInput,
        include: Optional[types.PromptInclude] = None
    ) -> _PrismaModelT:
        """Find a unique Prompt record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            Prompt filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Prompt model

        Returns
        -------
        prisma.models.Prompt
            The found Prompt record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        prompt = await Prompt.prisma().find_unique_or_raise(
            where={
                'id': 'bfidgijfjc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique_or_raise',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.PromptWhereInput] = None,
        cursor: Optional[types.PromptWhereUniqueInput] = None,
        include: Optional[types.PromptInclude] = None,
        order: Optional[Union[types.PromptOrderByInput, List[types.PromptOrderByInput]]] = None,
        distinct: Optional[List[types.PromptScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple Prompt records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of Prompt records returned
        skip
            Ignore the first N results
        where
            Prompt filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Prompt model
        order
            Order the returned Prompt records by any field
        distinct
            Filter Prompt records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.Prompt]
            The list of all Prompt records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 Prompt records
        prompts = await Prompt.prisma().find_many(take=10)

        # find the first 5 Prompt records ordered by the response field
        prompts = await Prompt.prisma().find_many(
            take=5,
            order={
                'response': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_many',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [model_parse(self._model, r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.PromptWhereInput] = None,
        cursor: Optional[types.PromptWhereUniqueInput] = None,
        include: Optional[types.PromptInclude] = None,
        order: Optional[Union[types.PromptOrderByInput, List[types.PromptOrderByInput]]] = None,
        distinct: Optional[List[types.PromptScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single Prompt record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Prompt filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Prompt model
        order
            Order the returned Prompt records by any field
        distinct
            Filter Prompt records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Prompt
            The first Prompt record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Prompt record ordered by the conversation_id field
        prompt = await Prompt.prisma().find_first(
            skip=1,
            order={
                'conversation_id': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None

        return model_parse(self._model, result)

    async def find_first_or_raise(
        self,
        skip: Optional[int] = None,
        where: Optional[types.PromptWhereInput] = None,
        cursor: Optional[types.PromptWhereUniqueInput] = None,
        include: Optional[types.PromptInclude] = None,
        order: Optional[Union[types.PromptOrderByInput, List[types.PromptOrderByInput]]] = None,
        distinct: Optional[List[types.PromptScalarFieldKeys]] = None,
    ) -> _PrismaModelT:
        """Find a single Prompt record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Prompt filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Prompt model
        order
            Order the returned Prompt records by any field
        distinct
            Filter Prompt records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Prompt
            The first Prompt record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Prompt record ordered by the created_at field
        prompt = await Prompt.prisma().find_first_or_raise(
            skip=1,
            order={
                'created_at': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first_or_raise',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update(
        self,
        data: types.PromptUpdateInput,
        where: types.PromptWhereUniqueInput,
        include: Optional[types.PromptInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single Prompt record.

        Parameters
        ----------
        data
            Prompt record data specifying what to update
        where
            Prompt filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned Prompt model

        Returns
        -------
        prisma.models.Prompt
            The updated Prompt record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        prompt = await Prompt.prisma().update(
            where={
                'id': 'ihieecagf',
            },
            data={
                # data to update the Prompt record to
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='update',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def upsert(
        self,
        where: types.PromptWhereUniqueInput,
        data: types.PromptUpsertInput,
        include: Optional[types.PromptInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            Prompt filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned Prompt model

        Returns
        -------
        prisma.models.Prompt
            The created or updated Prompt record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        prompt = await Prompt.prisma().upsert(
            where={
                'id': 'bghfciaafe',
            },
            data={
                'create': {
                    'id': 'bghfciaafe',
                    'query': 'jjfeafhfj',
                    'response': 'cbachdgfce',
                    'conversation_id': 'chbfcacbd',
                },
                'update': {
                    'query': 'jjfeafhfj',
                    'response': 'cbachdgfce',
                    'conversation_id': 'chbfcacbd',
                },
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='upsert',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update_many(
        self,
        data: types.PromptUpdateManyMutationInput,
        where: types.PromptWhereInput,
    ) -> int:
        """Update multiple Prompt records

        Parameters
        ----------
        data
            Prompt data to update the selected Prompt records to
        where
            Filter to select the Prompt records to update

        Returns
        -------
        int
            The total number of Prompt records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all Prompt records
        total = await Prompt.prisma().update_many(
            data={
                'updated_at': datetime.datetime.utcnow()
            },
            where={}
        )
        ```
        """
        resp = await self._client._execute(
            method='update_many',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    async def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.PromptWhereInput] = None,
        cursor: Optional[types.PromptWhereUniqueInput] = None,
    ) -> int:
        """Count the number of Prompt records present in the database

        Parameters
        ----------
        select
            Select the Prompt fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Prompt filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.PromptCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await Prompt.prisma().count()

        # results: prisma.types.PromptCountAggregateOutput
        results = await Prompt.prisma().count(
            select={
                '_all': True,
                'id': True,
            },
        )
        ```
        """


    @overload
    async def count(
        self,
        select: types.PromptCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.PromptWhereInput] = None,
        cursor: Optional[types.PromptWhereUniqueInput] = None,
    ) -> types.PromptCountAggregateOutput:
        ...

    async def count(
        self,
        select: Optional[types.PromptCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.PromptWhereInput] = None,
        cursor: Optional[types.PromptWhereUniqueInput] = None,
    ) -> Union[int, types.PromptCountAggregateOutput]:
        """Count the number of Prompt records present in the database

        Parameters
        ----------
        select
            Select the Prompt fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Prompt filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.PromptCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await Prompt.prisma().count()

        # results: prisma.types.PromptCountAggregateOutput
        results = await Prompt.prisma().count(
            select={
                '_all': True,
                'query': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = await self._client._execute(
            method='count',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.PromptCountAggregateOutput, resp['data']['result']['_count'])

    async def delete_many(
        self,
        where: Optional[types.PromptWhereInput] = None
    ) -> int:
        """Delete multiple Prompt records.

        Parameters
        ----------
        where
            Optional Prompt filter to find the records to be deleted

        Returns
        -------
        int
            The total number of Prompt records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all Prompt records
        total = await Prompt.prisma().delete_many()
        ```
        """
        resp = await self._client._execute(
            method='delete_many',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    async def group_by(
        self,
        by: List['types.PromptScalarFieldKeys'],
        *,
        where: Optional['types.PromptWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.PromptAvgAggregateInput'] = None,
        sum: Optional['types.PromptSumAggregateInput'] = None,
        min: Optional['types.PromptMinAggregateInput'] = None,
        max: Optional['types.PromptMaxAggregateInput'] = None,
        having: Optional['types.PromptScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.PromptCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.PromptScalarFieldKeys', 'types.SortOrder'], List[Mapping['types.PromptScalarFieldKeys', 'types.SortOrder']]]] = None,
    ) -> List['types.PromptGroupByOutput']:
        """Group Prompt records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar Prompt fields to group records by
        where
            Prompt filter to select records
        take
            Limit the maximum number of Prompt records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.PromptGroupByOutput]
            A list of dictionaries representing the Prompt record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group Prompt records by response values
        # and count how many records are in each group
        results = await Prompt.prisma().group_by(
            ['response'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = await self._client._execute(
            method='group_by',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]


class DatabaseConnectionActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: 'Client', model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model

    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.DatabaseConnection]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = await DatabaseConnection.prisma().query_raw(
            'SELECT * FROM DatabaseConnection WHERE id = $1',
            'bgchfhgceh',
        )
        ```
        """
        return await self._client.query_raw(query, *args, model=self._model)

    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.DatabaseConnection
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = await DatabaseConnection.prisma().query_first(
            'SELECT * FROM DatabaseConnection WHERE type = $1',
            'cafeiaccbc',
        )
        ```
        """
        return await self._client.query_first(query, *args, model=self._model)

    async def create(
        self,
        data: types.DatabaseConnectionCreateInput,
        include: Optional[types.DatabaseConnectionInclude] = None
    ) -> _PrismaModelT:
        """Create a new DatabaseConnection record.

        Parameters
        ----------
        data
            DatabaseConnection record data
        include
            Specifies which relations should be loaded on the returned DatabaseConnection model

        Returns
        -------
        prisma.models.DatabaseConnection
            The created DatabaseConnection record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a DatabaseConnection record from just the required fields
        databaseconnection = await DatabaseConnection.prisma().create(
            data={
                # data to create a DatabaseConnection record
                'id': 'gaddfhfh',
                'type': 'gieegcbeg',
                'uri': 'bgcffadich',
                'username': 'fcbichhci',
                'password': 'bcggadccgf',
                'host': 'jdcfdcgc',
                'port': 'cafdaehjid',
                'user_id': 'gifdddbia',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='create',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def create_many(
        self,
        data: List[types.DatabaseConnectionCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple DatabaseConnection records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of DatabaseConnection record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = await DatabaseConnection.prisma().create_many(
            data=[
                {
                    # data to create a DatabaseConnection record
                    'id': 'bchehecef',
                    'type': 'jeijcbhfe',
                    'uri': 'bjgejjabff',
                    'username': 'bcciijbibg',
                    'password': 'cffcachfd',
                    'host': 'bccdfhdigc',
                    'port': 'febcgjbfj',
                    'user_id': 'bageiegghg',
                },
                {
                    # data to create a DatabaseConnection record
                    'id': 'faidicegb',
                    'type': 'bacecgfhbe',
                    'uri': 'ihcahiead',
                    'username': 'biheheiajg',
                    'password': 'jbgijghgb',
                    'host': 'hgjcghfbi',
                    'port': 'icadbcehj',
                    'user_id': 'jchciaee',
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if self._client._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        resp = await self._client._execute(
            method='create_many',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.DatabaseConnectionWhereUniqueInput,
        include: Optional[types.DatabaseConnectionInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single DatabaseConnection record.

        Parameters
        ----------
        where
            DatabaseConnection filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned DatabaseConnection model

        Returns
        -------
        prisma.models.DatabaseConnection
            The deleted DatabaseConnection record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        databaseconnection = await DatabaseConnection.prisma().delete(
            where={
                'id': 'deeificjd',
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='delete',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def find_unique(
        self,
        where: types.DatabaseConnectionWhereUniqueInput,
        include: Optional[types.DatabaseConnectionInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique DatabaseConnection record.

        Parameters
        ----------
        where
            DatabaseConnection filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned DatabaseConnection model

        Returns
        -------
        prisma.models.DatabaseConnection
            The found DatabaseConnection record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        databaseconnection = await DatabaseConnection.prisma().find_unique(
            where={
                'id': 'bbcbhebbda',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return model_parse(self._model, result)

    async def find_unique_or_raise(
        self,
        where: types.DatabaseConnectionWhereUniqueInput,
        include: Optional[types.DatabaseConnectionInclude] = None
    ) -> _PrismaModelT:
        """Find a unique DatabaseConnection record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            DatabaseConnection filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned DatabaseConnection model

        Returns
        -------
        prisma.models.DatabaseConnection
            The found DatabaseConnection record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        databaseconnection = await DatabaseConnection.prisma().find_unique_or_raise(
            where={
                'id': 'bejfijgcfb',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique_or_raise',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.DatabaseConnectionWhereInput] = None,
        cursor: Optional[types.DatabaseConnectionWhereUniqueInput] = None,
        include: Optional[types.DatabaseConnectionInclude] = None,
        order: Optional[Union[types.DatabaseConnectionOrderByInput, List[types.DatabaseConnectionOrderByInput]]] = None,
        distinct: Optional[List[types.DatabaseConnectionScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple DatabaseConnection records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of DatabaseConnection records returned
        skip
            Ignore the first N results
        where
            DatabaseConnection filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned DatabaseConnection model
        order
            Order the returned DatabaseConnection records by any field
        distinct
            Filter DatabaseConnection records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.DatabaseConnection]
            The list of all DatabaseConnection records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 DatabaseConnection records
        databaseconnections = await DatabaseConnection.prisma().find_many(take=10)

        # find the first 5 DatabaseConnection records ordered by the uri field
        databaseconnections = await DatabaseConnection.prisma().find_many(
            take=5,
            order={
                'uri': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_many',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [model_parse(self._model, r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.DatabaseConnectionWhereInput] = None,
        cursor: Optional[types.DatabaseConnectionWhereUniqueInput] = None,
        include: Optional[types.DatabaseConnectionInclude] = None,
        order: Optional[Union[types.DatabaseConnectionOrderByInput, List[types.DatabaseConnectionOrderByInput]]] = None,
        distinct: Optional[List[types.DatabaseConnectionScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single DatabaseConnection record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            DatabaseConnection filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned DatabaseConnection model
        order
            Order the returned DatabaseConnection records by any field
        distinct
            Filter DatabaseConnection records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.DatabaseConnection
            The first DatabaseConnection record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second DatabaseConnection record ordered by the username field
        databaseconnection = await DatabaseConnection.prisma().find_first(
            skip=1,
            order={
                'username': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None

        return model_parse(self._model, result)

    async def find_first_or_raise(
        self,
        skip: Optional[int] = None,
        where: Optional[types.DatabaseConnectionWhereInput] = None,
        cursor: Optional[types.DatabaseConnectionWhereUniqueInput] = None,
        include: Optional[types.DatabaseConnectionInclude] = None,
        order: Optional[Union[types.DatabaseConnectionOrderByInput, List[types.DatabaseConnectionOrderByInput]]] = None,
        distinct: Optional[List[types.DatabaseConnectionScalarFieldKeys]] = None,
    ) -> _PrismaModelT:
        """Find a single DatabaseConnection record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            DatabaseConnection filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned DatabaseConnection model
        order
            Order the returned DatabaseConnection records by any field
        distinct
            Filter DatabaseConnection records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.DatabaseConnection
            The first DatabaseConnection record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second DatabaseConnection record ordered by the password field
        databaseconnection = await DatabaseConnection.prisma().find_first_or_raise(
            skip=1,
            order={
                'password': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first_or_raise',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update(
        self,
        data: types.DatabaseConnectionUpdateInput,
        where: types.DatabaseConnectionWhereUniqueInput,
        include: Optional[types.DatabaseConnectionInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single DatabaseConnection record.

        Parameters
        ----------
        data
            DatabaseConnection record data specifying what to update
        where
            DatabaseConnection filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned DatabaseConnection model

        Returns
        -------
        prisma.models.DatabaseConnection
            The updated DatabaseConnection record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        databaseconnection = await DatabaseConnection.prisma().update(
            where={
                'id': 'caifcbgii',
            },
            data={
                # data to update the DatabaseConnection record to
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='update',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def upsert(
        self,
        where: types.DatabaseConnectionWhereUniqueInput,
        data: types.DatabaseConnectionUpsertInput,
        include: Optional[types.DatabaseConnectionInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            DatabaseConnection filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned DatabaseConnection model

        Returns
        -------
        prisma.models.DatabaseConnection
            The created or updated DatabaseConnection record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        databaseconnection = await DatabaseConnection.prisma().upsert(
            where={
                'id': 'igaibbfgj',
            },
            data={
                'create': {
                    'id': 'igaibbfgj',
                    'type': 'bacecgfhbe',
                    'uri': 'ihcahiead',
                    'username': 'biheheiajg',
                    'password': 'jbgijghgb',
                    'host': 'hgjcghfbi',
                    'port': 'icadbcehj',
                    'user_id': 'jchciaee',
                },
                'update': {
                    'type': 'bacecgfhbe',
                    'uri': 'ihcahiead',
                    'username': 'biheheiajg',
                    'password': 'jbgijghgb',
                    'host': 'hgjcghfbi',
                    'port': 'icadbcehj',
                    'user_id': 'jchciaee',
                },
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='upsert',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update_many(
        self,
        data: types.DatabaseConnectionUpdateManyMutationInput,
        where: types.DatabaseConnectionWhereInput,
    ) -> int:
        """Update multiple DatabaseConnection records

        Parameters
        ----------
        data
            DatabaseConnection data to update the selected DatabaseConnection records to
        where
            Filter to select the DatabaseConnection records to update

        Returns
        -------
        int
            The total number of DatabaseConnection records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all DatabaseConnection records
        total = await DatabaseConnection.prisma().update_many(
            data={
                'host': 'bggajdcbbi'
            },
            where={}
        )
        ```
        """
        resp = await self._client._execute(
            method='update_many',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    async def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.DatabaseConnectionWhereInput] = None,
        cursor: Optional[types.DatabaseConnectionWhereUniqueInput] = None,
    ) -> int:
        """Count the number of DatabaseConnection records present in the database

        Parameters
        ----------
        select
            Select the DatabaseConnection fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            DatabaseConnection filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.DatabaseConnectionCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await DatabaseConnection.prisma().count()

        # results: prisma.types.DatabaseConnectionCountAggregateOutput
        results = await DatabaseConnection.prisma().count(
            select={
                '_all': True,
                'port': True,
            },
        )
        ```
        """


    @overload
    async def count(
        self,
        select: types.DatabaseConnectionCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.DatabaseConnectionWhereInput] = None,
        cursor: Optional[types.DatabaseConnectionWhereUniqueInput] = None,
    ) -> types.DatabaseConnectionCountAggregateOutput:
        ...

    async def count(
        self,
        select: Optional[types.DatabaseConnectionCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.DatabaseConnectionWhereInput] = None,
        cursor: Optional[types.DatabaseConnectionWhereUniqueInput] = None,
    ) -> Union[int, types.DatabaseConnectionCountAggregateOutput]:
        """Count the number of DatabaseConnection records present in the database

        Parameters
        ----------
        select
            Select the DatabaseConnection fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            DatabaseConnection filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.DatabaseConnectionCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await DatabaseConnection.prisma().count()

        # results: prisma.types.DatabaseConnectionCountAggregateOutput
        results = await DatabaseConnection.prisma().count(
            select={
                '_all': True,
                'user_id': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = await self._client._execute(
            method='count',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.DatabaseConnectionCountAggregateOutput, resp['data']['result']['_count'])

    async def delete_many(
        self,
        where: Optional[types.DatabaseConnectionWhereInput] = None
    ) -> int:
        """Delete multiple DatabaseConnection records.

        Parameters
        ----------
        where
            Optional DatabaseConnection filter to find the records to be deleted

        Returns
        -------
        int
            The total number of DatabaseConnection records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all DatabaseConnection records
        total = await DatabaseConnection.prisma().delete_many()
        ```
        """
        resp = await self._client._execute(
            method='delete_many',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    async def group_by(
        self,
        by: List['types.DatabaseConnectionScalarFieldKeys'],
        *,
        where: Optional['types.DatabaseConnectionWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.DatabaseConnectionAvgAggregateInput'] = None,
        sum: Optional['types.DatabaseConnectionSumAggregateInput'] = None,
        min: Optional['types.DatabaseConnectionMinAggregateInput'] = None,
        max: Optional['types.DatabaseConnectionMaxAggregateInput'] = None,
        having: Optional['types.DatabaseConnectionScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.DatabaseConnectionCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.DatabaseConnectionScalarFieldKeys', 'types.SortOrder'], List[Mapping['types.DatabaseConnectionScalarFieldKeys', 'types.SortOrder']]]] = None,
    ) -> List['types.DatabaseConnectionGroupByOutput']:
        """Group DatabaseConnection records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar DatabaseConnection fields to group records by
        where
            DatabaseConnection filter to select records
        take
            Limit the maximum number of DatabaseConnection records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.DatabaseConnectionGroupByOutput]
            A list of dictionaries representing the DatabaseConnection record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group DatabaseConnection records by created_at values
        # and count how many records are in each group
        results = await DatabaseConnection.prisma().group_by(
            ['created_at'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = await self._client._execute(
            method='group_by',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]



def _select_fields(root: str, select: Mapping[str, Any]) -> str:
    """Helper to build a GraphQL selection string

    This is a work around until field selection is added to the query builder.
    """

    return root + ' {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))


from . import models